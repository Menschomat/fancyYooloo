@startuml

namespace allgemein {
  class Starter {
    + main(args: String[])
  }

  class StarterClient {
    + main(args: String[])
  }

  class StarterServer {
    + main(args: String[])
  }
}

allgemein.StarterClient -- client.YoolooClient
allgemein.StarterServer -- server.YoolooServer
allgemein.Starter -- common.YoolooKartenspiel

namespace client {
  enum ClientState {
    + CLIENTSTATE_NULL
    + CLIENTSTATE_CONNECT
    + CLIENTSTATE_LOGIN
    + CLIENTSTATE_RECEIVE_CARDS
    + CLIENTSTATE_SORT_CARDS
    + CLIENTSTATE_REGISTER
    + CLIENTSTATE_PLAY_SINGLE_GAME
    + CLIENTSTATE_DISCONNECT
    + CLIENTSTATE_DISCONNECTED
  }

  class YoolooClient {
    - serverHostname: String
    - serverPort: int
    - serverSocket: Socket
    - ois: ObjectInputStream
    - oos: ObjectOutputStream
    - clientState: ClientState
    - spielerName: string
    - newLogin: LoginMessage
    - meinSpieler: YoolooSpieler
    - spielVerlauf: YoolooStich[]
    - logger: Logger
    + YoolooClient()
    + YoolooClient(serverHostname: String, serverPort: int, nameCheck: boolean)
    + startClient(): void
    - verbindeZumServer(): void
    - spieleStich(stichNummer: int): void
    - spieleKarteAus(i: int): void
    - empfangeKommando(): ServerMessage
    - empfangeSpieler(): void
    - empfangeStich(): YoolooStich
    - empfangeErgebnis(): String
    - eingabeSpielerDatenFuerLogin(): LoginMessage
    - ausgabeKartenSet(): void
    - sortierungFestlegen(): YoolooKarte[]
    - fancySortierung(): YoolooKarte[]
  }
}

client.YoolooClient "1" *-- "1" client.ClientState
client.YoolooClient "1" *-- "1" common.LoginMessage
client.YoolooClient "1" *-- "1" common.YoolooSpieler
client.YoolooClient "1" *-- "0..*" common.YoolooStich

namespace common {
  class LoginMessage {
    - serialVersionUID: long
    - spielerName: string
    - gameMode: GameMode
    + LoginMessage(name: String, play_mode: GameMode)
    + LoginMessage()
    + LoginMessage(spielerName: String)
    + getSpielerName(): String
    + setSpielerName(spielerName: String): void
    + getGameMode(): GameMode
    + setGameMode(gameMode: GameMode): void
    + toString(): string
  }

  class YoolooKarte {
    - serialVersionUID: long
    - farbe: Kartenfarbe
    - wert: int
    + YoolooKarte(kartenfarbe: Kartenfarbe, kartenwert: int)
    + getFarbe(): Kartenfarbe
    + getWert(): int
    + toString(): String
  }

   enum Kartenfarbe {
     Gelb,
     Rot,
     Gruen,
     Blau,
     Orange,
     Pink,
     Violett,
     Tuerkis
   }

  class YoolooKartenspiel {
    - logger: Logger
    - Spielname: String
    - minKartenWert: int
    - maxKartenWert: int
    # spielkarten: YoolooKarte[][]
    # anzahlFarben: int
    # anzahlWerte: int
    - spielerliste: ArrayList<YoolooSpieler>
    + YoolooKartenspiel()
    + listeSpielstand(): void
    + spielerRegistrieren(name: String): void
    + spielerRegistrieren(neuerSpieler YoolooSpieler): YoolooSpieler
    + toString(): String
    + spielerSortierungFestlegen(): void
    + spieleRunden(): void
    + berechneGewinnerIndex(karten: YoolooKarte[]): int
    + getSpielname(): String
    + setSpiename(spielname: String): void
  }

  class YoolooSpieler {
    - serialVersionUID: int
    - private: String
    - spielfarbe: Kartenfarbe
    - clientHandlerId: int
    - punkte: int
    - aktuelleSortierung: YoolooKarte[]
    + YoolooSpieler(name: String, maxKartenWert: int)
    + sortierungFestlegen(): void
    + erhaeltPunkte(neuePunkte: int): int
    + toString(): String
    + getName(): String
    + setName(name: String): void
    + getSpielfarbe(): Kartenfarbe
    + setSpielfarbe(spielfarbe: Kartenfarbe)
    + getClientHandlerId(): int
    + setClientHandlerId(clientHandlerId: int)
    + getPunkte(): int
    + setPunkte(puntke: int): void
    + getAktuelleSortierung(): YoolooKarte[]
    + stichAuswerten(stich: YoolooStich): void
  }

  class YoolooStich {
    - serialVersionUID: long
    - stichNummer: int
    - spielerNummer: int
    - karten: YoolooKarte[]
    + YoolooStich()
    + YoolooStich(YoolooKarte[] stich)
    + getStichNummer(): int
    + setStichNummer(stichNummer: int): void
    + getSpielerNummer(): int
    + setSpielerNummer(spielerNummer: int): void
    + getStich(): YoolooKarte[]
    + setStich(YoolooKarte[] stich): void
    + toString(): String
  }
}

common.LoginMessage "1" *-- "1" server.GameMode
common.YoolooKarte "1" *-- "1" common.Kartenfarbe
common.YoolooKartenspiel "1" *-- "0..*" common.YoolooKarte
common.YoolooKartenspiel "1" *-- "0..*" common.YoolooSpieler
common.YoolooSpieler "1" *-- "1" common.Kartenfarbe
common.YoolooSpieler "1" *-- "0..*" common.YoolooKarte
common.YoolooStich "1" #-- "0..*" common.YoolooKarte

namespace messages {
  enum ClientMessageType {
    ClientMessage_OK,
    ClientMessage_NOT_OK
  }

  class ClientMessage {
    - serialVersionUID: long
    - message: String
    - type: ClientMessageType
    + ClientMessage(clientMessageType: ClientMessageType, messagetext: String)
    + getMessage(): String
    + setMessage(message: String): void
    + getType(): ClientMessageType
    + setType(type: ClientMessageType): void
  }

  enum ServerMessageType {
    SERVERMESSAGE_ACKNOWLEDGE
    SERVERMESSAGE_SENDLOGIN
    SERVERMESSAGE_SORT_CARD_SET
    SERVERMESSAGE_SEND_CARD
    SERVERMESSAGE_RESULT_SET
    SERVERMESSAGE_CHANGE_STATE
  }

  enum ServerMessageResult {
    SERVER_MESSAGE_RESULT_OK
    SERVER_MESSAGE_RESULT_NOT_OK
  }

  class ServerMessage {
    - serialVersionUID: long
    - serverMessageType: ServerMessageType
    - nextClientState: ClientState
    - serverMessageResult: ServerMessageResult
    - paramInt: int
    + ServerMessage()
    + ServerMessage(type: ServerMessageType, nextState: ClientState, result: ServerMessageResult)
    + ServerMessage(type: ServerMessageType, nextState: ClientState, result: ServerMessageResult, paramInt: int)
    + getServerMessageType(): ServerMessageType
    + setServerMessageType(serverMessageType: ServerMessageType): void
    + getNextClientState(): ClientState
    + setNextClientState(nextClientState: ClientState): void
    + getServerMessageResult(): ServerMessageResult
    + setServerMessageResult(serverMessageResult: ServerMessageResult): void
    + getParamInt(): int
    + setParamInt(paramInt: int): void
    + toString(): String
  }
}

namespace persistence {
  class YoolooFileWriter {
    - filePath: String
    - logger: Logger
    + YoolooFileWriter()
    + saveUsers(users: YoolooPersistance): void
    + loadUsers(): YoolooPersistance
  }

  class YoolooPersistence {
    - users: Map<String, List<Integer>>
    + getUsers(): Map<String, List<Integer>>
    + setUsers(users: Map<String, List<Integer>>): void
    + toString(): String
  }

  class YoolooUsers {
    - logger: Logger
    - fileWriter: YoolooFileWriter
    - persistence: YoolooPersistance
    + YoolooUsers()
    + setUserCardOrder(meinSpieler: YoolooSpieler): void
    + getUserCardOrder(meinSpieler: YoolooSpieler): YoolooKarte[]
    - valuesAreValid()
  }
}

persistence.YoolooUsers "1" --* "1" persistence.YoolooPersistence
persistence.YoolooUsers "1" --* "1" persistence.YoolooFileWriter

namespace server {
  enum ServerState {
    ServerState_NULL
    ServerState_CONNECT
    ServerState_LOGIN
    ServerState_REGISTER
    ServerState_MANAGE_SESSION
    ServerState_PLAY_SESSION
    ServerState_DISCONNECT
    ServerState_DISCONNECTED
  }

  class YoolooClientHandler {
    - logger: Logger
    - delay: int
    - myServer: YoolooServer
    - socketAddress: SocketAddress
    - clientSocket: Socket
    - oos: ObjectOutputStream
    - ois: ObjectInputStream
    - state: ServerState
    - session: YoolooSession
    - meinSpieler: YoolooSpieler
    - clientHandlerId: int
    - gespielteKarten: ArrayList<YoolooKarte> gespielteKarten
    + YoolooClientHandler(yoolooServer: YoolooServer, clientSocket: Socket)
    + run(): void
    - sendeKommando(serverMessageType: ServerMessageType, clientState: ClientState, serverMessageResult: ServerMessageResult, paramInt: int): void
    - sendeKommando(serverMessageType: ServerMessageType, clientState: ClientState, serverMessageResult: ServerMessageResult): void
    - verbindeZumClient(): void
    - empfangeVomClient(): Object
    - registriereSpielerInSession(meinSpieler: YoolooSpieler): void
    - spieleKarte(stichNummer: int, empfangeneKarte: YoolooKarte): YoolooStich
    + setHandlerID(clientHandlerId): void
    + ausgabeSpielplan(): void
    + joinSession(session: YoolooSession): void
  }

  enum GameMode {
    GAMEMODE_NULL
    GAMEMODE_SINGLE_GAME
    GAMEMODE_PLAY_ROUND_GAME
    GAMEMODE_PLAY_LIGA
    GAMEMODE_PLAY_POKAL
    GAMEMODE_PLAY_POKAL_LL
  }

  class YoolooServer {
    - port: int
    - spielerProRunde: int
    - minRealPlayers: int
    - waitForPlayers: int
    - botSpawnerRunning: boolean
    - serverGameMode: GameMode
    - users: YoolooUsers
    - logger: Logger
    - serverSocket: ServerSocket
    - serverAktiv: boolean
    - clientHandlerList: ArrayList<YoolooClientHandler>
    - spielerPool: ExecutorService
    + YoolooServer(port: int, spielerProRunde: int, minRealPlayers: int, waitForPlayers: int, gameMode GameMode, nameCheck: boolean)
    + startServer(): void
    + shutDownServer(code: int): void
    + getUsers(): YoolooUsers
    + getClientCount(): int
    + getSpielerProRunde(): int
    + getServerGameMode(): GameMode
    + setServerGameMode(serverGameMode: GameMode)
    - printBanner(): void
    - spawnBots(): void
    - botSpawnCriteriaOk(startedSearchTime: long): boolean
    - clientSpawnTimeExceeded(startedSearch: long): boolean
  }

  class YoolooSession {
    - anzahlSpielerInRunde: int
    - gameMode: GameMode
    - spielplan: YoolooKarte[][]
    - aktuellesSpiel: YoolooKartenspiel
    - ausgewerteteStiche: YoolooStich[] ausgewerteteStiche
    + YoolooSession(anzahlSpielerInRunde: int)
    + YoolooSession(anzahlSpielerInRunde: int, gamemode: GameMode)
    + spieleKarteAus(stichNummer: int, spielerID: int, karte: YoolooKarte)
    + stichFuerRundeAuswerten(stichNummer: int): YoolooStich
    + getAktuellesSpiel(): YoolooKartenspiel
    + setAktuellesSpiel(aktuellesSpiel: YoolooKarte): void
    + getAnzahlSpielerInRunde(): int
    + setAnzahlSpielerInRunde(anzahlSpielerInRunde: int): void
    + getGamemode(): GameMode
    + setGamemode(gamemode: GameMode): void
    + getSpielplan(): YoolooKarte[][]
    + setSpielplan(spielplan: YoolooKarte[][]): void
    + getErgebnis(): String
  }
}

@enduml